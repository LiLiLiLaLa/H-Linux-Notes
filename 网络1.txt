协议：一种标准，通信双方约定好一定的规则

路由器和交换机的区别：对于现代的路由器到交换机，是几乎没有区别的，而传统的路由器实现网络层到物理层，而传统的交换机实现数据链路层到物理层

协议分层好处：
1.把大的问题拆分成小的简单的问题
2.各层自己使用的诸多协议灵活的替换和修改，不影响其它层

IP地址（网络层）的表示方式：点分十进制（四个字节）
MAC地址（数据链路层）：六个字节

端口号：如果没写端口号，默认访问80端口

urlencode：编码
urldecode：解码

HTTP请求报文格式
1.首行
a方法（GET、POST）
bURL
c版本号（最常见的HTTP1.1）
2.协议头部header
每一行是一个键值对，键和值之间使用冒号加空格分割
3.空行
协议头标记结束
4.正文（body）
通常情况下GET方法对应的请求没有body
POST方法对应的请求有body
body部分的格式可能和url中的参数部分是一样的

HTTP响应报文格式
1.首行
a版本号
b状态码（200访问成功   404页面找不到    403无访问权限   500服务器内部出错）
c状态码的描述信息
2.协议头部header部分
每一行都是一个键值对，键和值之间使用冒号加空格分割
3.空行
header部分结束
4.正文（body）
HTML

HTTP中GET和POST方法有什么不同？
GET：用户数据放在URL里面
POST：用户数据放在body里面

HTTP状态码
1XX     信息性状态码        接收的请求正在处理
2XX     成功状态码        请求正常处理完毕
3XX     重定向状态码        需要进行附加操作以完成请求
4XX     客户端错误状态码         服务器无法处理请求
5XX     服务器错误状态码         服务器处理请求出错

cookie字段根据每个域名会保存一份
cookie长度有限，有些浏览器长度上限4K



通过几种方式获取到元素（标签）对象：
（1）document集合属性的方式
（2）查询关系的方式
（3）document对象的方法

在JS中，正则表达式的一些基本语法：
1.数量词
X+
X?
X{n,m}
X*
2.检验用户名是否符合正则规则
获取到用户到输入的用户名
定义正则 var reg = /xxx/;
使用当前正则规则匹配的方法：test（获取的字符串内容）
3.表单认证

JQuery：就是一个JS代码库
选择器：id,class,元素,*,并集选择器
write less,do more
Prototype：原型

Bootstrap

自定义对象：定义对象：function+函数名，创建对象：var 对象名 = new 函数名();
（1）有参方式
（2）无参方式
（3）var 对象名称 = new Object();
        对象名称.属性名 = “属性值”
        对象名称.方法名 =function(){...}
（4）字面量的方式：json格式
            {"key1":"value1","key2":"value2"...}
        var 对象名称={
            "key1":"value1",
            "key2":"value2"...
            "方法名":function(){...};
}

js原型：Prototype
给内置对象中添加方法去使用
js原型的简写方式
Array对象：本身的内置方法：reverse(),join("xx")
给Array对象追加一些其他的方法：利用Prototype
格式：内置对象.protptype.自定义的方法名=function(形式)参数{
        //具体方法中算法
}

BOM编程
基于浏览器对象模型，封装了四个对象
Window 对象:window对象可以省略不写
    定义一个遍历 taskld = Window.setInterval("任务 function",毫秒)
        结束定时器:clearInterval(taskId)
    setTimeout("任务 function",毫秒)
        结束当前tiemout定时器
            clearTiemout(taskId)
Window.alter
Window.cofirm();
open("url","打开",)
